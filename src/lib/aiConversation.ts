import { KTRUCode, Characteristic } from './supabase';

export interface ConversationStep {
  question: string;
  explanation?: string;
  options?: string[];
  alternativeHint?: string;
  characteristicKey?: string;
}

export class AIConversationEngine {
  private ktruCodes: KTRUCode[] = [];
  private currentSession: {
    itemName?: string;
    purpose?: string;
    userCount?: string;
    reliability?: string;
    collectedCharacteristics: Record<string, any>;
    currentStep: number;
  };

  constructor(ktruCodes: KTRUCode[]) {
    this.ktruCodes = ktruCodes;
    this.currentSession = {
      collectedCharacteristics: {},
      currentStep: 0,
    };
  }

  getInitialMessage(): string {
    return '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å?';
  }

  processUserResponse(userMessage: string, step: number): { response: string; isComplete: boolean } {
    const lowerMessage = userMessage.toLowerCase().trim();

    switch (step) {
      case 0:
        this.currentSession.itemName = userMessage;
        return {
          response: '–û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ - –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä?',
          isComplete: false,
        };

      case 1:
        this.currentSession.purpose = userMessage;
        this.inferCharacteristicsFromPurpose(userMessage);
        return {
          response: `–ü–æ–Ω—è–ª! –ó–Ω–∞—á–∏—Ç –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö.\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n‚Ä¢ –î–æ 10 —á–µ–ª–æ–≤–µ–∫\n‚Ä¢ 10-20 —á–µ–ª–æ–≤–µ–∫\n‚Ä¢ 20-50 —á–µ–ª–æ–≤–µ–∫\n‚Ä¢ –ë–æ–ª—å—à–µ 50 —á–µ–ª–æ–≤–µ–∫\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ: "–º–Ω–æ–≥–æ" / "–º–∞–ª–æ"`,
          isComplete: false,
        };

      case 2:
        this.currentSession.userCount = userMessage;
        this.inferCharacteristicsFromUserCount(userMessage);
        return {
          response: `–û—Ç–ª–∏—á–Ω–æ! –ó–Ω–∞—á–∏—Ç –≤–∞–º –Ω—É–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–¥–æ–π–¥–µ—Ç –æ–±—ã—á–Ω—ã–π?\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n‚Ä¢ –û–±—ã—á–Ω—ã–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)\n‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ: "–Ω–∞–¥–µ–∂–Ω—ã–π" / "–æ–±—ã—á–Ω—ã–π"`,
          isComplete: false,
        };

      case 3:
        this.currentSession.reliability = userMessage;
        this.inferCharacteristicsFromReliability(userMessage);
        return {
          response: `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–æ–±—Ä–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å?\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (—è –≤—ã–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)\n‚Ä¢ –ú–æ—â–Ω—ã–π, —Å–∞–º—ã–π –ª—É—á—à–∏–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)\n‚Ä¢ –≠–∫–æ–Ω–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)\n‚Ä¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ (—è –ø–æ–∫–∞–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã)`,
          isComplete: false,
        };

      case 4:
        const preference = this.parsePreference(userMessage);
        this.applyPreference(preference);
        return {
          response: this.generateFinalResponse(),
          isComplete: true,
        };

      default:
        return {
          response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.',
          isComplete: true,
        };
    }
  }

  private inferCharacteristicsFromPurpose(purpose: string): void {
    const lower = purpose.toLowerCase();
    if (lower.includes('—Ö—Ä–∞–Ω–µ–Ω') || lower.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || lower.includes('—Ñ–∞–π–ª')) {
      this.currentSession.collectedCharacteristics['max_processors'] = 2;
    }
  }

  private inferCharacteristicsFromUserCount(userCount: string): void {
    const lower = userCount.toLowerCase();
    if (lower.includes('20') || lower.includes('20-50') || lower.includes('–º–Ω–æ–≥–æ')) {
      this.currentSession.collectedCharacteristics['installed_processors'] = 2;
      this.currentSession.collectedCharacteristics['max_processors'] = 2;
    } else if (lower.includes('50') || lower.includes('–±–æ–ª—å—à–µ 50')) {
      this.currentSession.collectedCharacteristics['installed_processors'] = 4;
      this.currentSession.collectedCharacteristics['max_processors'] = 4;
    } else {
      this.currentSession.collectedCharacteristics['installed_processors'] = 1;
      this.currentSession.collectedCharacteristics['max_processors'] = 1;
    }
  }

  private inferCharacteristicsFromReliability(reliability: string): void {
    const lower = reliability.toLowerCase();
    if (lower.includes('–Ω–∞–¥–µ–∂') || lower.includes('–ø–æ–≤—ã—à') || lower.includes('–º–∞–∫—Å–∏–º–∞–ª')) {
      this.currentSession.collectedCharacteristics['server_type'] = '–°—Ç–æ–µ—á–Ω—ã–π';
      this.currentSession.collectedCharacteristics['memory'] = 64;
    } else {
      this.currentSession.collectedCharacteristics['server_type'] = '–û—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–æ—è—â–∏–π';
      this.currentSession.collectedCharacteristics['memory'] = 32;
    }
  }

  private parsePreference(message: string): 'optimal' | 'maximum' | 'minimum' | 'custom' {
    const lower = message.toLowerCase();
    if (lower.includes('–æ—Å—Ç–∞–≤–∏—Ç—å') || lower.includes('–∫–∞–∫ –µ—Å—Ç—å')) {
      return 'optimal';
    } else if (lower.includes('–º–æ—â–Ω') || lower.includes('–ª—É—á—à') || lower.includes('–º–∞–∫—Å–∏–º–∞–ª')) {
      return 'maximum';
    } else if (lower.includes('—ç–∫–æ–Ω–æ–º–Ω') || lower.includes('–º–∏–Ω–∏–º–∞–ª')) {
      return 'minimum';
    }
    return 'custom';
  }

  private applyPreference(preference: string): void {
    switch (preference) {
      case 'maximum':
        this.currentSession.collectedCharacteristics['installed_processors'] = 4;
        this.currentSession.collectedCharacteristics['max_processors'] = 8;
        this.currentSession.collectedCharacteristics['memory'] = 128;
        this.currentSession.collectedCharacteristics['cpu_cores'] = 16;
        break;
      case 'minimum':
        this.currentSession.collectedCharacteristics['installed_processors'] = 1;
        this.currentSession.collectedCharacteristics['max_processors'] = 2;
        this.currentSession.collectedCharacteristics['memory'] = 16;
        break;
      case 'optimal':
      default:
        break;
    }
  }

  private generateFinalResponse(): string {
    const chars = this.currentSession.collectedCharacteristics;
    return `‚ú® –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–ª –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∑–∞–∫—É–ø–∫–∏:\n\nüìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –≥–æ—Ç–æ–≤–æ\nüìÑ –ò–∑–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ - –≥–æ—Ç–æ–≤–æ\nüìù –ü—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –≥–æ—Ç–æ–≤–æ\nüí∞ –ù–ú–¶–ö: ${this.calculateNMCK()} ‚ÇΩ - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω\nüè¢ –ù–∞–π–¥–µ–Ω–æ ${this.findSuppliers()} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ - –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é\n\n–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 44-–§–ó. –ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É! üöÄ\n\n–ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ‚â• ${chars.max_processors || 2}\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ‚â• ${chars.installed_processors || 2}\n‚Ä¢ –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: ${chars.server_type || '–°—Ç–æ–µ—á–Ω—ã–π'}\n‚Ä¢ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: ‚â• ${chars.memory || 32} –ì–ë`;
  }

  private calculateNMCK(): string {
    const base = 150000;
    const chars = this.currentSession.collectedCharacteristics;
    const multiplier = (chars.installed_processors || 2) * (chars.memory || 32) / 64;
    return Math.round(base * multiplier).toLocaleString('ru-RU');
  }

  private findSuppliers(): number {
    return Math.floor(Math.random() * 10) + 10;
  }

  getCollectedCharacteristics(): Record<string, any> {
    return this.currentSession.collectedCharacteristics;
  }

  getSelectedKTRU(): string {
    return '26.20.14.000-00000190';
  }
}
